diff --git a/data/skin.xml b/data/skin.xml
index bbf4dd0..b99bdce 100755
--- a/data/skin.xml
+++ b/data/skin.xml
@@ -148,10 +148,10 @@
 			<convert type="ConditionalShowHide" />
 		</widget>
 		<!-- Audio icon (is there multichannel audio?) -->
-<!--	<widget source="session.CurrentService" render="Pixmap" pixmap="skin_default/icons/icon_dolby.png" position="645,48" zPosition="1" size="26,16" alphatest="on">
+		<widget source="session.CurrentService" render="Pixmap" pixmap="skin_default/icons/icon_dolby.png" position="645,48" zPosition="1" size="26,16" alphatest="on">
 			<convert type="ServiceInfo">IsMultichannel</convert>
 			<convert type="ConditionalShowHide" />
-		</widget>	-->
+		</widget>
 		<!-- Progressbar (current event duration)-->
 		<ePixmap pixmap="skin_default/progress_bg.png" position="48,77" size="84,7" transparent="1" alphatest="on" />
 		<widget source="session.Event_Now" render="Progress" pixmap="skin_default/progress_small.png" position="50,78" zPosition="1" size="80,5" transparent="1">
diff --git a/lib/gdi/epng.cpp b/lib/gdi/epng.cpp
index fd33298..d8c1982 100644
--- a/lib/gdi/epng.cpp
+++ b/lib/gdi/epng.cpp
@@ -116,10 +116,71 @@ int loadPNG(ePtr<gPixmap> &result, const char *filename)
 		}
 		surface->clut.start=0;
 		png_read_end(png_ptr, end_info);
+#ifndef BUILD_VUPLUS
 	} else {
 		result=0;
 		eDebug("%s: %dx%dx%d png, %d", filename, (int)width, (int)height, (int)bit_depth, color_type);
 	}
+#else		//csh Support for 32bit png file.
+	}else if (color_type == PNG_COLOR_TYPE_RGB_ALPHA && bit_depth == 8){
+//		eDebug("%s: %dx%dx%d png, %d", filename, (int)width, (int)height, (int)bit_depth, color_type);
+		result=new gPixmap(eSize(width, height), bit_depth*4);
+		gSurface *surface = result->surface;
+		int pass;
+		png_bytep *rowptr=new png_bytep[height];
+
+
+		//png_set_swap_alpha(png_ptr);
+
+		if (color_type & PNG_COLOR_MASK_COLOR)
+			png_set_bgr(png_ptr);
+
+
+
+		int number_passes = png_set_interlace_handling(png_ptr);
+
+		for (unsigned int i=0; i<height; i++)
+			rowptr[i]=((png_byte*)(surface->data))+i*surface->stride;
+
+		for (pass = 0; pass < number_passes; pass++)
+			for (int y = 0; y < height; y++)
+			{
+				png_read_rows(png_ptr, &rowptr[y], NULL, 1);
+			}
+
+/*
+		png_bytep testptr = rowptr[32] + sizeof(unsigned int)*32;
+
+		for(int i = 0 ; i < 40 ; i ++)
+			fprintf(stderr, "0x%x\n", testptr[i]);
+*/
+		for (int y = 0; y < height; y++){				//csh  
+			__u32 col;			
+			unsigned int *ptr = (unsigned int *)rowptr[y];
+			for(int i = 0 ; i < width ; i ++){
+				col= ptr[i];
+				col ^=0xFF000000;
+				ptr[i] = col;
+			}
+		}
+ 
+		surface->clut.data=0;
+		surface->clut.colors=0;
+		surface->clut.start=0; 
+/*
+		testptr = rowptr[32] + sizeof(unsigned int)*32;
+		fprintf(stderr, "----------------------------------------------\n");
+		for(int i = 0 ; i < 40 ; i ++)
+			fprintf(stderr, "0x%x\n", testptr[i]);
+*/
+		delete [] rowptr;
+		png_read_end(png_ptr, end_info);
+
+	} else {
+		result=0;
+		eDebug("%s: %dx%dx%d png, %d", filename, (int)width, (int)height, (int)bit_depth, color_type);
+	}
+#endif
 
 	png_destroy_read_struct(&png_ptr, &info_ptr,&end_info);
 	fclose(fp);
diff --git a/lib/python/Screens/ChannelSelection.py b/lib/python/Screens/ChannelSelection.py
index fc176a7..75a933f 100755
--- a/lib/python/Screens/ChannelSelection.py
+++ b/lib/python/Screens/ChannelSelection.py
@@ -2,6 +2,8 @@ from Tools.Profile import profile
 
 from Screen import Screen
 from Components.Button import Button
+
+from Components.Label import Label
 from Components.ServiceList import ServiceList
 from Components.ActionMap import NumberActionMap, ActionMap, HelpableActionMap
 from Components.MenuList import MenuList
@@ -733,6 +735,8 @@ class ChannelSelectionBase(Screen):
 		self["key_yellow"] = Button(_("Provider"))
 		self["key_blue"] = Button(_("Favourites"))
 
+		self["etitle"] = Label(_('Channel Selection'))
+
 		self["list"] = ServiceList()
 		self.servicelist = self["list"]
 
@@ -878,25 +882,51 @@ class ChannelSelectionBase(Screen):
 		pos = titleStr.find(']')
 		if pos == -1:
 			pos = titleStr.find(')')
-		if pos != -1:
-			titleStr = titleStr[:pos+1]
-			Len = len(self.servicePath)
-			if Len > 0:
-				base_ref = self.servicePath[0]
-				if Len > 1:
-					end_ref = self.servicePath[Len-1]
-				else:
-					end_ref = None
-				nameStr = self.getServiceName(base_ref)
-				titleStr += ' ' + nameStr
-				if end_ref is not None:
-					if Len > 2:
-						titleStr += '/../'
+
+		if config.skin.primary_skin.value	=="750S/skin.xml":
+			if pos != -1:
+				titleStr = titleStr[:pos+1]
+				Len = len(self.servicePath)
+				if Len > 0:
+					base_ref = self.servicePath[0]
+					if Len > 1:
+						end_ref = self.servicePath[Len-1]
 					else:
-						titleStr += '/'
-					nameStr = self.getServiceName(end_ref)
-					titleStr += nameStr
-				self.setTitle(titleStr)
+						end_ref = None
+					nameStr = self.getServiceName(base_ref)
+					if end_ref is not None:
+						titles = ".../"+ nameStr
+						if Len > 2:
+							titles += '/../'
+						else:
+							titles += '/'
+						nameStr = self.getServiceName(end_ref)
+						titles += nameStr
+						self["etitle"].setText(titles)
+					else:
+						titles = "Channel Selection "+titleStr + ' ' + nameStr			
+						self["etitle"].setText(titles)
+		else:	
+		#	
+			if pos != -1:
+				titleStr = titleStr[:pos+1]
+				Len = len(self.servicePath)
+				if Len > 0:
+					base_ref = self.servicePath[0]
+					if Len > 1:
+						end_ref = self.servicePath[Len-1]
+					else:
+						end_ref = None
+					nameStr = self.getServiceName(base_ref)
+					titleStr += ' ' + nameStr
+					if end_ref is not None:
+						if Len > 2:
+							titleStr += '/../'
+						else:
+							titleStr += '/'
+						nameStr = self.getServiceName(end_ref)
+						titleStr += nameStr
+					self.setTitle(titleStr)
 
 	def moveUp(self):
 		self.servicelist.moveUp()
diff --git a/lib/python/Screens/FixedMenu.py b/lib/python/Screens/FixedMenu.py
index 0122346..39b48ac 100644
--- a/lib/python/Screens/FixedMenu.py
+++ b/lib/python/Screens/FixedMenu.py
@@ -20,3 +20,8 @@ class FixedMenu(Screen):
 			})
 
 		self["title"] = StaticText(title)
+		self["thistory"] = StaticText(title)
+		self["title0"] = StaticText('')
+		self["title1"] = StaticText('')
+		self["title2"] = StaticText('')
+
diff --git a/lib/python/Screens/Menu.py b/lib/python/Screens/Menu.py
index 2a8801c..fe5bcf0 100755
--- a/lib/python/Screens/Menu.py
+++ b/lib/python/Screens/Menu.py
@@ -22,6 +22,27 @@ from Screens.Setup import Setup, getSetupTitle
 # read the menu
 mdom = xml.etree.cElementTree.parse(resolveFilename(SCOPE_SKIN, 'menu.xml'))
 
+class title_History:
+	def __init__(self):
+		self.thistory = ''
+	def reset(self):
+		self.thistory = ''
+	def reducehistory(self):
+#		print "reducehistory" , self.thistory
+		history_len = len(self.thistory.split('>'))
+		if(history_len < 3):
+			self.reset()
+			return
+		if(self.thistory == ''):
+			return
+		result = self.thistory.rsplit('>',2)
+		if(result[0] == ''):
+			self.reset()
+			return
+		self.thistory = result[0] + '> '
+
+t_history = title_History()
+
 class boundFunction:
 	def __init__(self, fnc, *args):
 		self.fnc = fnc
@@ -237,9 +258,39 @@ class Menu(Screen):
 		a = a and _(a)
 		if a is None:
 			a = _(parent.get("text", "").encode("UTF-8"))
+		else:
+			t_history.reset()
+			
 		self["title"] = StaticText(a)
 		self.menu_title = a
 
+		self["thistory"] = StaticText(t_history.thistory)
+		history_len = len(t_history.thistory)
+		self["title0"] = StaticText('')
+		self["title1"] = StaticText('')
+		self["title2"] = StaticText('')
+		if history_len < 13 :
+			self["title0"] = StaticText(a)
+		elif history_len < 21 :
+			self["title0"] = StaticText('')
+			self["title1"] = StaticText(a)
+		else:
+			self["title0"] = StaticText('')
+			self["title1"] = StaticText('')
+			self["title2"] = StaticText(a)				
+
+#		english title			
+#		if(t_history.thistory ==''):
+#			t_history.thistory = str(etitle) + ' > '
+#		else:
+#			t_history.thistory = t_history.thistory + str(etitle) + ' > '
+
+		if(t_history.thistory ==''):
+			t_history.thistory = str(a) + ' > '
+		else:
+			t_history.thistory = t_history.thistory + str(a) + ' > '
+		#
+
 	def keyNumberGlobal(self, number):
 		print "menu keyNumber:", number
 		# Calculate index
@@ -250,9 +301,11 @@ class Menu(Screen):
 			self.okbuttonClick()
 
 	def closeNonRecursive(self):
+		t_history.reducehistory()
 		self.close(False)
 
 	def closeRecursive(self):
+		t_history.reset()
 		self.close(True)
 
 	def createSummary(self):
diff --git a/skin.py b/skin.py
index 933f524..151af61 100755
--- a/skin.py
+++ b/skin.py
@@ -235,14 +235,27 @@ class AttributeParser:
 		self.guiObject.setZPosition(int(value))
 	def itemHeight(self, value):
 		self.guiObject.setItemHeight(int(value))
+
+	def getPixmapPtr(self, value):
+		global pngcache
+		ptr = None
+		for cvalue, cptr in pngcache:
+			if cvalue == value:
+				ptr = cptr
+
+		if ptr is None:
+			ptr = loadPixmap(value, self.desktop)
+
+		return ptr
+
 	def pixmap(self, value):
-		ptr = loadPixmap(value, self.desktop)
+		ptr = self.getPixmapPtr(value)
 		self.guiObject.setPixmap(ptr)
 	def backgroundPixmap(self, value):
-		ptr = loadPixmap(value, self.desktop)
+		ptr = self.getPixmapPtr(value)
 		self.guiObject.setBackgroundPicture(ptr)
 	def selectionPixmap(self, value):
-		ptr = loadPixmap(value, self.desktop)
+		ptr = self.getPixmapPtr(value)
 		self.guiObject.setSelectionPicture(ptr)
 	def itemHeight(self, value):
 		self.guiObject.setItemHeight(int(value))
@@ -336,6 +349,34 @@ class AttributeParser:
 	def id(self, value):
 		pass
 
+from enigma import runMainloop, eDVBDB, eTimer, quitMainloop, \
+	getDesktop, ePythonConfigQuery, eAVSwitch, eServiceEvent
+pngcache = []
+def cachemenu():
+	pixmaplist = []
+	for (path, skin) in dom_skins:
+		for x in skin.findall("screen"):
+			if x.attrib.get('name') == 'menu_mainmenu':
+				print x.attrib.get('name')
+				for s in x.findall("ePixmap"):
+					if s.attrib.get('pixmap','') is not '':
+						pixmaplist.append(s.attrib.get('pixmap',''))
+				for s in x.findall('widget'):
+					if s.attrib.get('pixmap','') is not '':
+						pixmaplist.append(s.attrib.get('pixmap',''))
+	desktop = getDesktop(0)
+	for s in pixmaplist:
+		value ='/usr/share/enigma2/'+s
+#		print value
+		ptr = loadPixmap(value, desktop)
+		pngcache.append((value,ptr))
+
+try:
+	if config.skin.primary_skin.value == "750S/skin.xml" or config.skin.primary_skin.value == "Vu_HD/skin.xml":
+		cachemenu()
+except:
+	print "fail cache main menu"
+
 def applySingleAttribute(guiObject, desktop, attrib, value, scale = ((1,1),(1,1))):
 	# Someone still using applySingleAttribute?
 	AttributeParser(guiObject, desktop, scale).applyOne(attrib, value)
