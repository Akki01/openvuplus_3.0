diff --git a/src/plugin.py b/src/plugin.py
index f76f534..7493e67 100644
--- a/src/plugin.py
+++ b/src/plugin.py
@@ -39,7 +39,7 @@ config.autoshutdown.time = ConfigInteger(default = 120, limits = (1, 1440))
 config.autoshutdown.inactivetime = ConfigInteger(default = 300, limits = (1, 1440))
 config.autoshutdown.autostart = ConfigEnableDisable(default = False)
 config.autoshutdown.enableinactivity = ConfigEnableDisable(default = False)
-config.autoshutdown.inactivityaction = ConfigSelection(default = "standby", choices = [("standby", _("Standby")), ("deepstandby", _("Deepstandby"))])
+config.autoshutdown.inactivityaction = ConfigSelection(default = "standby", choices = [("standby", _("Idle Server Mode")), ("deepstandby", _("Standby"))])
 config.autoshutdown.inactivitymessage = ConfigYesNo(default = True)
 config.autoshutdown.messagetimeout = ConfigInteger(default = 20, limits = (1, 99))
 config.autoshutdown.epgrefresh = ConfigYesNo(default = True)
@@ -191,7 +191,7 @@ class AutoShutDownActions:
 			if config.autoshutdown.inactivitymessage.value == True:
 				self.asdkeyaction = None
 				if config.autoshutdown.inactivityaction.value == "standby":
-					self.asdkeyaction = _("Go to standby")
+					self.asdkeyaction = _("Go to idle server mode")
 				elif config.autoshutdown.inactivityaction.value == "deepstandby":
 					self.asdkeyaction = _("Power off STB")
 				if config.autoshutdown.play_media.value and os_path.exists(config.autoshutdown.media_file.value):
@@ -268,12 +268,12 @@ def startSetup(menuid):
 def Plugins(**kwargs):
 		if config.autoshutdown.plugin.value:
 			return [PluginDescriptor(where = [PluginDescriptor.WHERE_SESSIONSTART, PluginDescriptor.WHERE_AUTOSTART], fnc = autostart),
-				PluginDescriptor(name=_("AutoShutDown Setup"), description=_("configure automated power off / standby"), where = PluginDescriptor.WHERE_MENU, fnc=startSetup),
-				PluginDescriptor(name=_("AutoShutDown Setup"), description=_("configure automated power off / standby"), where = PluginDescriptor.WHERE_PLUGINMENU, icon="autoshutdown.png", fnc=main),
-				PluginDescriptor(name=_("AutoShutDown Setup"), description=_("configure automated power off / standby"), where = PluginDescriptor.WHERE_EXTENSIONSMENU, fnc=main)]
+				PluginDescriptor(name=_("AutoShutDown Setup"), description=_("configure automated power off / idle mode"), where = PluginDescriptor.WHERE_MENU, fnc=startSetup),
+				PluginDescriptor(name=_("AutoShutDown Setup"), description=_("configure automated power off / idle mode"), where = PluginDescriptor.WHERE_PLUGINMENU, icon="autoshutdown.png", fnc=main),
+				PluginDescriptor(name=_("AutoShutDown Setup"), description=_("configure automated power off / idle mode"), where = PluginDescriptor.WHERE_EXTENSIONSMENU, fnc=main)]
 		else:
 			return [PluginDescriptor(where = [PluginDescriptor.WHERE_SESSIONSTART, PluginDescriptor.WHERE_AUTOSTART], fnc = autostart),
-				PluginDescriptor(name=_("AutoShutDown Setup"), description=_("configure automated power off / standby"), where = PluginDescriptor.WHERE_MENU, fnc=startSetup)]
+				PluginDescriptor(name=_("AutoShutDown Setup"), description=_("configure automated power off / idle mode"), where = PluginDescriptor.WHERE_MENU, fnc=startSetup)]
 
 class AutoShutDownConfiguration(Screen, ConfigListScreen):
 	skin = """
@@ -312,10 +312,10 @@ class AutoShutDownConfiguration(Screen, ConfigListScreen):
 	def createConfigList(self):
 		self.get_media = getConfigListEntry(_("Choose media file") + " (" + config.autoshutdown.media_file.value + ")", config.autoshutdown.fake_entry)
 		self.list = []
-		self.list.append(getConfigListEntry("---------- " + _("Configuration for automatic power off in standby"), config.autoshutdown.fake_entry))
-		self.list.append(getConfigListEntry(_("Enable automatic power off in standby:"), config.autoshutdown.autostart))
+		self.list.append(getConfigListEntry("---------- " + _("Configuration for automatic power off in idle server mode"), config.autoshutdown.fake_entry))
+		self.list.append(getConfigListEntry(_("Enable automatic power off in idle server mode:"), config.autoshutdown.autostart))
 		if config.autoshutdown.autostart.value == True:
-			self.list.append(getConfigListEntry(_("Time in standby for power off (min):"), config.autoshutdown.time))
+			self.list.append(getConfigListEntry(_("Time in idle server mode for power off (min):"), config.autoshutdown.time))
 			self.list.append(getConfigListEntry(_("Disable power off for given interval:"), config.autoshutdown.exclude_time_off))
 			if config.autoshutdown.exclude_time_off.value:
 				self.list.append(getConfigListEntry(_("Begin of excluded interval (hh:mm):"), config.autoshutdown.exclude_time_off_begin))
